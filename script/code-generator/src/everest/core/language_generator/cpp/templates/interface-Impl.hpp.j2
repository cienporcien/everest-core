{% from "helper_macros.j2" import print_spdx_line, include_batches, handle_cmd_signature, print_template_info, insert_block, cpp_type  %}
{{ print_spdx_line('Apache-2.0') }}
#ifndef {{ hpp_guard }}
#define {{ hpp_guard }}

{{ print_template_info('3', 'marked regions will be kept') }}

{{ include_batches(includes) }}

{{ insert_block(blocks.add_headers) }}

namespace module {
namespace {{ namespace }} {

struct Conf {
    {% for item in config %}
    {{ cpp_type(item) }} {{ item.name }};
    {% endfor %}
};

class {{ class_name }} : public {{ base_class_name }} {
public:
    {{ class_name }}() = delete;
    {{ class_name }}(Everest::ModuleAdapter* ev, const Everest::PtrContainer<{{ module_class_name }}> &mod, Conf& config) :
        {{ base_class_name }}(ev, "{{ id }}"),
        mod(mod),
        config(config)
    {};

    {{ insert_block(blocks.public_defs, indent=4) }}

protected:
    {% if not interface.cmds %}
    // no commands defined for this interface
    {% else %}
    // command handler functions
    {% for cmd in interface.cmds %}
    {{ handle_cmd_signature(cmd) }} final;
    {% endfor %}
    {% endif %}

    {{ insert_block(blocks.protected_defs, indent=4) }}

private:
    const Everest::PtrContainer<{{ module_class_name }}>& mod;
    const Conf& config;

    virtual void init() override;
    virtual void ready() override;

    {{ insert_block(blocks.private_defs, indent=4) }}
};

{{ insert_block(blocks.after_class) }}

} // namespace {{ namespace }}
} // namespace module

#endif // {{ hpp_guard }}
